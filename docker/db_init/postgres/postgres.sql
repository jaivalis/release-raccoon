-- Create the database and user if they don't exist
DO
$$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_catalog.pg_roles WHERE rolname = 'raccoon') THEN
            CREATE ROLE raccoon LOGIN;
        END IF;
    END
$$;

DO
$$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = 'raccoondb') THEN
            CREATE DATABASE raccoondb;
        END IF;
    END
$$;

-- Grant all privileges on the database to the user
GRANT ALL PRIVILEGES ON DATABASE raccoondb TO raccoon;

-- Connect to the database
\connect raccoondb;

-- Create tables

create table Artist (
                        artistId bigint generated by default as identity,
                        create_date timestamp(6),
                        name varchar(300) unique,
                        lastfmUri varchar(255),
                        musicbrainzId varchar(255) unique,
                        spotifyUri varchar(255) unique,
                        primary key (artistId)
);

create table ArtistRelease (
                               artist_id bigint not null,
                               release_id bigint not null,
                               primary key (artist_id, release_id)
);

create table RaccoonUser (
                             lastNotified date,
                             spotifyEnabled boolean,
                             create_date timestamp(6),
                             lastLastFmScrape timestamp(6),
                             lastSpotifyScrape timestamp(6),
                             modify_date timestamp(6),
                             user_id bigint generated by default as identity,
                             email varchar(255) unique,
                             lastfmUsername varchar(255),
                             username varchar(255),
                             primary key (user_id)
);

create table Releases (
                          releasedOn date,
                          releaseId bigint generated by default as identity,
                          name varchar(300),
                          musicbrainzId varchar(255),
                          spotifyUri varchar(255),
                          type varchar(255),
                          primary key (releaseId)
);

create table Scrape (
                        isComplete boolean,
                        releaseCount integer,
                        completeDate timestamp(6),
                        create_date timestamp(6),
                        id bigint generated by default as identity,
                        modify_date timestamp(6),
                        releasesFromMusicbrainz bigint,
                        releasesFromSpotify bigint,
                        relevantReleases bigint,
                        usersNotified bigint,
                        primary key (id)
);

create table UserArtist (
                            hasNewRelease boolean,
                            weight float(24),
                            artist_id bigint not null,
                            user_id bigint not null,
                            primary key (artist_id, user_id)
);

create index ArtistSpotifyUri_idx
    on Artist (spotifyUri);

create index ArtistName_idx
    on Artist (name);

create index email_idx
    on RaccoonUser (email);

create index ReleaseSpotifyUri_idx
    on Releases (spotifyUri);

alter table if exists ArtistRelease
    add constraint FK76o28jbj8nefc724kfiscvenk
        foreign key (release_id)
            references Releases;

alter table if exists ArtistRelease
    add constraint FK27mlse6dudk4xs9k2hfx8p4gg
        foreign key (artist_id)
            references Artist;

alter table if exists UserArtist
    add constraint FKkb7vbhl8onwbnkjj9ogpnxq2u
        foreign key (user_id)
            references RaccoonUser;

alter table if exists UserArtist
    add constraint FKaahjoyl914ej2xddcp3ae972v
        foreign key (artist_id)
            references Artist;
